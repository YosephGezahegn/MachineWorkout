// This file is temporarily disabled because middleware cannot be used with static export
// To re-enable, rename to middleware.ts and change output in next.config.js

import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req: request, res })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  // If no session and trying to access protected route, redirect to login
  if (!session && isProtectedRoute(request.nextUrl.pathname)) {
    const redirectUrl = request.nextUrl.clone()
    redirectUrl.pathname = '/login'
    redirectUrl.searchParams.set('redirectedFrom', request.nextUrl.pathname)
    return NextResponse.redirect(redirectUrl)
  }

  return res
}

function isProtectedRoute(pathname: string) {
  const protectedPaths = [
    '/dashboard',
    '/profile',
    '/workout/new',
    '/workout/history',
  ]

  return protectedPaths.some(path => pathname.startsWith(path)) ||
    pathname === '/workout'
}

export const config = {
  matcher: [
    '/dashboard/:path*',
    '/profile/:path*',
    '/workout/new/:path*',
    '/workout/history/:path*',
    '/workout/detail/:path*',
    '/workout/:path*',
    '/workout'
  ],
};